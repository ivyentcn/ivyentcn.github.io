---
apiVersion: v1
kind: Service
metadata:
  name: augur-mariadb
  labels:
    k8s-app: augur-mariadb
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: 3306
  publishNotReadyAddresses: true
  selector:
    k8s-app: augur-mariadb
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: augur-mariadb-pv
  labels:
    type: local
spec:
  persistentVolumeReclaimPolicy: Delete
  storageClassName: manual
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/augur-mariadb"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: augur-mariadb-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: augur-mariadb
  labels:
    k8s-app: augur-mariadb
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: augur-mariadb
  template:
    metadata:
      labels:
        k8s-app: augur-mariadb
    spec:
      securityContext:
        runAsUser: 27
        runAsGroup: 27
        fsGroup: 27
#        seLinuxOptions:
#          user: system_u
#          role: system_r
#          type: container_t
#          level: s0:c819,c841
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: mariadb
        image: registry.access.redhat.com/rhscl/mariadb-102-rhel7:latest
        command:
        - bash
        - -c
        - "run-mysqld --max-allowed-packet=1073741824 --max-long-data-size=2147483648 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 1Gi
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      initContainers:
      - name: mysql-data
        image: ivyent/mysql-data:1.0.1
        command:
        - sh
        - -c
        - |
          chown 27:27 /var/lib/mysql;
          tar -zxf /mysql-data.tar.gz -C /var/lib/mysql/;
#          chcon -R -u system_u -r system_r -t container_t -l s0:c819,c841 /var/lib/mysql;
#        imagePullPolicy: Always
        securityContext:
          privileged: true
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      terminationGracePeriodSeconds: 5
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: augur-mariadb-pvc
      imagePullSecrets:
      - name: dockerio
---
apiVersion: v1
kind: Service
metadata:
  name: augur
  labels:
    k8s-app: augur
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8900
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    k8s-app: augur
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: augur
  labels:
    k8s-app: augur
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: augur
  template:
    metadata:
      labels:
        k8s-app: augur
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      hostAliases:
      - ip: "__HAPROXY_IP__"
        hostnames:
        - "augur.augur.openshift.local"
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: augur
        image: ivyent/augur:1.0.1
        args:
        - --tls=false
        - --tls-listen=0.0.0.0:8900
        - --http-listen=0.0.0.0:8080
        - --store-address=mysql://ivyeos:ivyeos@tcp(augur-mariadb:3306)/ivyeos?charset=utf8mb4&parseTime=True&loc=Local
        - --advertise-url=https://augur.augur.openshift.local:443
        - --log-level=6
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 4000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 1Gi
        ports:
        - containerPort: 8900
          name: https
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: augur-data
          mountPath: /opt/augur/data
      volumes:
      - name: augur-data
        emptyDir: {}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: augur
spec:
  host: augur.augur.openshift.local
  port:
    targetPort: 8080
  to:
    kind: Service
    name: augur
  tls:
    termination: edge
    key: |-
      -----BEGIN PRIVATE KEY-----
      MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDjHIuqZlgrCJqB
      3IRpsxKgyrGaLqJX/2NKMjkD0FA+Pv62nRKz8c2EtYHFt0u0Q9lQ2tL2dpBUA+VV
      ncR3vV3TKYIWWQqhMnWAwMt/xzi+xxUKSh5cMJ0WdBCI9DxOmKPPA30lICoacQ+G
      84q7Vm2Wcd87u/x/EI2K43R54HzDsZH+16UHVCGObYZ0VwqQCsmBcdq/7meAj3Ox
      OBLqq1maCBogawpbCEXy8xy528qISGDZI51tV6iy+YnivWCIc14K4JovdudXAD7z
      8zWNLdPsa/l6Wuzzu1vsLmYdo1BL0rD+MdEdRfBFt4SLxVEh8dDJuDCv3OPR7niU
      Ai3yLPkVAgMBAAECggEBAMNPQS0BZsFbXMRhB95+iX6N0b5ubF6Q2qpsFmwZMWjW
      c+ZHnlXxlHSUQ03tG8Wis7i89r/NpsEZuJewXc07pPx7rcvaNzH5WuOm6Vqx0TL/
      sjBvHTza8bzlg3LD1zkgO39D2NOcnZivslK0DpKc+RFwTDHqsHH1okPW58wIKkN/
      SvMIWBP1UySVeLE24DTkZk1qzgqBAc8JQlmx0AHQwbznLvRkQRsuNdnDNRsv5fqZ
      nA+OPlRuA6w1SQh/1sAVr0wght4QpT57VJAizxIhwtkZNuvyBTY8cnCAJ1KDsN+l
      mSLCiq+0vAbb9wua/f30IT9gAN7H/HI5NfeeGpf5PeECgYEA9GvtDLpRCAnXc2Er
      vUWXz0Yqxz9v/CoP+2DCwbNoqiMNKrBiYqbW1M5YKd6HNAOaPJQNU+2G9kE2GS1j
      Z70hCR1pcYzNPIINOyUoAy6dXYbniAAlSpHko930xXh5KCbgYb8K6UIA2CSYrDvE
      UQswAA9glEUeOgsDNxiFPI0oyCMCgYEA7d6zvzxFrLa6ycBI1o7aMt+81NTWl3Op
      zBiNQZL5RFCtC7qDBBPDxQwSiqWsTVvf7jrwNvRwno64Z/YHYR7XldrlyzedHaCC
      3M0ynilKDbG8VKykYwICI70I3OriHq5rYjah2SEmcct45k31sSipeP4R/JKH4y5G
      Pq47x3gvcWcCgYEAqMaVq4JETe6tzUg98bZKe6ASDf+qDk/lNUm9cg+2qDUH9IBT
      j5dxJQVPL6ovZiVOraH2Cgwsc4LYHk6PI6UfWLHsi7IUTkHnbP3dQUVA+MIcwnaH
      SZSwcs7jJDBqSOV/bz+CA0vGVXn/yn6Cswusm34CzJ9lneLY14ShDAzVKk0CgYBt
      37CnZO/KF52wE2GRueqQFUjkBmwZCRQlcjHNWFZLd/h2snBSMc779deas2wjT4zg
      Pdk3iTF8C/CiFMLT2as7TSFX/RhV1w6bby0yYWATc0XK1vQXx5W1bFvrr5NDGM4B
      T7ry0J0xcwslVl1mt6GQgctNH2IlTfqkeVajjKBdgQKBgQDUx1hK5ktsNKBmigVt
      aFQ0dOuUIi57wm5xvxjt6D/UXVbgtGpoVru7zm/fIgfTr7HWPPLxB0/o9Z6Tp7HP
      GERUToqITihzN9RKy4d4RSH9s71wuBx9Af+if1RzK7n2dY0XELWnU+fB0wpVTAsm
      rIED35Igh5SYGo/SjV8l8RU5wg==
      -----END PRIVATE KEY-----
    certificate: |-
      -----BEGIN CERTIFICATE-----
      MIIDbzCCAlegAwIBAgIUTuLwH3jIiEB8hspL6tQ8Hx/aDIowDQYJKoZIhvcNAQEF
      BQAwRTEaMBgGA1UEAwwRbXlhdWd1ci5pdnllbnQuY24xGjAYBgNVBAoMEW15YXVn
      dXIuaXZ5ZW50LmNuMQswCQYDVQQGEwJDTjAgFw0yMTAzMTUwMDAwMDBaGA8yMDUw
      MDMxNjAwMDAwMFowfTELMAkGA1UEBhMCQ04xGjAYBgNVBAgMEW15YXVndXIuaXZ5
      ZW50LmNuMRowGAYDVQQHDBFteWF1Z3VyLml2eWVudC5jbjEaMBgGA1UECgwRbXlh
      dWd1ci5pdnllbnQuY24xGjAYBgNVBAMMEW15YXVndXIuaXZ5ZW50LmNuMIIBIjAN
      BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4xyLqmZYKwiagdyEabMSoMqxmi6i
      V/9jSjI5A9BQPj7+tp0Ss/HNhLWBxbdLtEPZUNrS9naQVAPlVZ3Ed71d0ymCFlkK
      oTJ1gMDLf8c4vscVCkoeXDCdFnQQiPQ8TpijzwN9JSAqGnEPhvOKu1ZtlnHfO7v8
      fxCNiuN0eeB8w7GR/telB1Qhjm2GdFcKkArJgXHav+5ngI9zsTgS6qtZmggaIGsK
      WwhF8vMcudvKiEhg2SOdbVeosvmJ4r1giHNeCuCaL3bnVwA+8/M1jS3T7Gv5elrs
      87tb7C5mHaNQS9Kw/jHRHUXwRbeEi8VRIfHQybgwr9zj0e54lAIt8iz5FQIDAQAB
      ox0wGzALBgNVHREEBDACggAwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQUFAAOC
      AQEAz2RdisqjDdILj6l55SDah1RtiMyY5L4YZg+mzRsDokkE3kDHZjVeRAirrIhU
      9ReP54Gmv4hiv495MgiN4GO/839yot5T8QMOUkILSGFQEckRChgJ58BIHec44eAf
      v/KQfoKl3vH14I6wNE4ypN0+kUJs9feVArK8kRclYWRWa1aTmC7zURFWLECcO5lB
      zPIU8qA4yoaol01d71uAXsaMXmROymfu6SDXOi32wrx64cpNePXeuwHQ85yF52HN
      REHqmP2RJ7pW8kWemExOdHy7JSJzxVg4Dg4SfOHf/5Av9GL2hyDICONsBfwJDVRN
      tSY0mL8W4OqFAn/R6557Ya5zRw==
      -----END CERTIFICATE-----
---
apiVersion: v1
kind: Service
metadata:
  name: zabbix-server
  labels:
    k8s-app: zabbix-server
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  ports:
  - name: zabbix-server
    port: 10051
    protocol: TCP
    targetPort: 10051
  selector:
    k8s-app: zabbix-server
---
apiVersion: v1
kind: Service
metadata:
  name: zabbix-server-inner
  labels:
    k8s-app: zabbix-server-inner
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  clusterIP: None
  ports:
  - name: zabbix-server
    port: 10051
    protocol: TCP
    targetPort: 10051
  selector:
    k8s-app: zabbix-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zabbix-server
  labels:
    k8s-app: zabbix-server
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: zabbix-server
  template:
    metadata:
      labels:
        k8s-app: zabbix-server
    spec:
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: zabbix-server
        image: zabbix/zabbix-server-mysql:alpine-5.2.1
        env:
        - name: DB_SERVER_HOST
          value: augur-mariadb
        - name: MYSQL_DATABASE
          value: zabbix
        - name: MYSQL_USER
          value: zabbix
        - name: MYSQL_PASSWORD
          value: zabbix
        - name: ZBX_JAVAGATEWAY_ENABLE
          value: "True"
        - name: ZBX_JAVAGATEWAY
          value: localhost
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 500Mi
        ports:
        - containerPort: 10051
---
apiVersion: v1
kind: Service
metadata:
  name: zabbix-java-gateway
  labels:
    k8s-app: zabbix-java-gateway
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  ports:
  - name: zabbix-java-gateway
    port: 10052
    protocol: TCP
    targetPort: 10052
  selector:
    k8s-app: zabbix-java-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zabbix-java-gateway
  labels:
    k8s-app: zabbix-java-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: zabbix-java-gateway
  template:
    metadata:
      labels:
        k8s-app: zabbix-java-gateway
    spec:
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: zabbix-java-gateway
        image: zabbix/zabbix-java-gateway:ubuntu-5.0-latest
        env:
        - name: ZBX_SERVER_HOST
          value: zabbix-server
        - name: ZBX_SERVER_PORT
          value: "10051"
        resources:
          limits:
            cpu: 100m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 256Mi
        ports:
        - containerPort: 10052
---
apiVersion: v1
kind: Service
metadata:
  name: zabbix-web-console
  labels:
    k8s-app: zabbix-web-console
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  ports:
  - name: zabbix-web-console
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    k8s-app: zabbix-web-console
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: zabbix-web-console
spec:
  host: zabbix-web-console.augur.openshift.local
  port:
    targetPort: 8080
  to:
    kind: Service
    name: zabbix-web-console
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zabbix-web-console
  labels:
    k8s-app: zabbix-web-console
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: zabbix-web-console
  template:
    metadata:
      labels:
        k8s-app: zabbix-web-console
    spec:
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: zabbix-web-console
        image: zabbix/zabbix-web-nginx-mysql:alpine-5.2.1
        env:
        - name: ZBX_SERVER_HOST
          value: zabbix-server
        - name: ZBX_SERVER_PORT
          value: "10051"
        - name: DB_SERVER_HOST
          value: augur-mariadb
        - name: DB_SERVER_PORT
          value: "3306"
        - name: MYSQL_DATABASE
          value: zabbix
        - name: MYSQL_USER
          value: zabbix
        - name: MYSQL_PASSWORD
          value: zabbix
        - name: PHP_TZ
          value: "Asia/Shanghai"
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 256Mi
        ports:
        - containerPort: 10052
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zabbix-config
data:
  zabbix-agentd.conf: |
    LogType=console
    Include=/etc/zabbix/zabbix_agentd.d/
    LoadModulePath=/var/lib/zabbix/modules/
    User=zabbix
    HostMetadata=auto-registration
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: zabbix-agent
  labels:
    kube-eye-app: zabbix-agent
spec:
  selector:
    matchLabels:
      kube-eye-app: zabbix-agent
  template:
    metadata:
      labels:
        kube-eye-app: zabbix-agent
    spec:
      priorityClassName: system-node-critical
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: zabbix-agent
        image: zabbix/zabbix-agent:centos-5.0.11
        command:
        - bash
        - -c
        - >
          ping -c 1 zabbix-server-inner &&
          /bin/cp -f /tmp/zabbix_agentd.tmeplate /etc/zabbix/zabbix_agentd.conf &&
          echo Hostname=$(ZBX_HOSTNAME) >> /etc/zabbix/zabbix_agentd.conf &&
          echo Server=`ping -c 1 zabbix-server-inner | head -n 1 | awk -F '[()]' '{print $2}'` >> /etc/zabbix/zabbix_agentd.conf &&
          echo ServerActive=`ping -c 1 zabbix-server-inner | head -n 1 | awk -F '[()]' '{print $2}'`:10051 >> /etc/zabbix/zabbix_agentd.conf &&
          /usr/sbin/zabbix_agentd --foreground -c /etc/zabbix/zabbix_agentd.conf
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
#        - name: ZBX_PASSIVESERVERS
#          value: zabbix-server
#        - name: ZBX_ACTIVESERVERS
#          value: zabbix-server:10051
#        - name: ZBX_METADATA
#          value: auto-registration
        - name: ZBX_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - containerPort: 10050
          name: restapi
          protocol: TCP
        volumeMounts:
        - name: config-volume
          mountPath: /tmp/zabbix_agentd.tmeplate
          subPath: zabbix-agentd.conf
      terminationGracePeriodSeconds: 3
      volumes:
      - name: config-volume
        configMap:
          name: zabbix-config
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Elasticsearch"
spec:
  ports:
  - port: 9200
    protocol: TCP
    targetPort: db
    name: db
  - port: 9300
    protocol: TCP
    targetPort: transport
    name: transport
  publishNotReadyAddresses: true
  selector:
    k8s-app: elasticsearch-logging
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging-inner
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Elasticsearch"
spec:
  clusterIP: None
  ports:
    - name: db
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: transport
      port: 9300
      protocol: TCP
      targetPort: 9300
  publishNotReadyAddresses: true
  selector:
    k8s-app: elasticsearch-logging
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  - apiGroups:
      - ""
    resources:
      - "services"
      - "namespaces"
      - "endpoints"
    verbs:
      - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
  - kind: ServiceAccount
    name: elasticsearch-logging
    namespace: augur
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: elasticsearch-logging
  apiGroup: ""
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    version: v7.4.2
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  serviceName: elasticsearch-logging-inner
  replicas: 1
  selector:
    matchLabels:
      k8s-app: elasticsearch-logging
      version: v7.4.2
  template:
    metadata:
      labels:
        k8s-app: elasticsearch-logging
        version: v7.4.2
    spec:
      serviceAccountName: elasticsearch-logging
      imagePullSecrets:
      - name: dockerio
      containers:
      - image: ivyent/elasticsearch:7.4.2
        name: elasticsearch-logging
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 4000m
            memory: 3Gi
          requests:
            cpu: 2000m
            memory: 2Gi
        ports:
        - containerPort: 9200
          name: db
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 5
          timeoutSeconds: 10
        readinessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 5
          timeoutSeconds: 10
        volumeMounts:
        - name: elasticsearch-logging
          mountPath: /data
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MASTER_NODES
          value: "1"
      volumes:
      - name: elasticsearch-logging
        emptyDir: {}
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - image: alpine:3.6
        command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
        name: elasticsearch-logging-init
        securityContext:
          privileged: true
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: fluentd-es-config-v0.2.0
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
  system.conf: |-
    <system>
      root_dir /tmp/fluentd-buffers/
    </system>

  containers.input.conf: |-
    <source>
      @id fluentd-containers.log
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/es-containers.log.pos
      tag raw.kubernetes.*
      read_from_head true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>

    # Detect exceptions in the log output and forward them as one log entry.
    <match raw.kubernetes.**>
      @id raw.kubernetes
      @type detect_exceptions
      remove_tag_prefix raw
      message log
      stream stream
      multiline_flush_interval 5
      max_bytes 500000
      max_lines 1000
    </match>

    # Concatenate multi-line logs
    <filter **>
      @id filter_concat
      @type concat
      key message
      multiline_end_regexp /\n$/
      separator ""
    </filter>

    # Enriches records with Kubernetes metadata
    <filter kubernetes.**>
      @id filter_kubernetes_metadata
      @type kubernetes_metadata
    </filter>

    # Fixes json fields in Elasticsearch
    <filter kubernetes.**>
      @id filter_parser
      @type parser
      key_name log
      reserve_data true
      remove_key_name_field true
      <parse>
        @type multi_format
        <pattern>
          format json
        </pattern>
        <pattern>
          format none
        </pattern>
      </parse>
    </filter>
  system.input.conf: |-
    # Example:
    # 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081
    <source>
      @id minion
      @type tail
      format /^(?<time>[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?<severity>[^ \]]*) *\] (?<message>.*)$/
      time_format %Y-%m-%d %H:%M:%S
      path /var/log/salt/minion
      pos_file /var/log/salt.pos
      tag salt
    </source>

    # Example:
    # Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script
    <source>
      @id startupscript.log
      @type tail
      format syslog
      path /var/log/startupscript.log
      pos_file /var/log/es-startupscript.log.pos
      tag startupscript
    </source>

    # Examples:
    # time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"
    # time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404
    # TODO(random-liu): Remove this after cri container runtime rolls out.
    <source>
      @id docker.log
      @type tail
      format /^time="(?<time>[^"]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
      path /var/log/docker.log
      pos_file /var/log/es-docker.log.pos
      tag docker
    </source>

    # Example:
    # 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
    <source>
      @id etcd.log
      @type tail
      # Not parsing this, because it doesn't have anything particularly useful to
      # parse out of it (like severities).
      format none
      path /var/log/etcd.log
      pos_file /var/log/es-etcd.log.pos
      tag etcd
    </source>

    # Multi-line parsing is required for all the kube logs because very large log
    # statements, such as those that include entire object bodies, get split into
    # multiple lines by glog.

    # Example:
    # I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]
    <source>
      @id kubelet.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kubelet.log
      pos_file /var/log/es-kubelet.log.pos
      tag kubelet
    </source>

    # Example:
    # I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed
    <source>
      @id kube-proxy.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-proxy.log
      pos_file /var/log/es-kube-proxy.log.pos
      tag kube-proxy
    </source>

    # Example:
    # I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
    <source>
      @id kube-apiserver.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-apiserver.log
      pos_file /var/log/es-kube-apiserver.log.pos
      tag kube-apiserver
    </source>

    # Example:
    # I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
    <source>
      @id kube-controller-manager.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-controller-manager.log
      pos_file /var/log/es-kube-controller-manager.log.pos
      tag kube-controller-manager
    </source>

    # Example:
    # W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
    <source>
      @id kube-scheduler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-scheduler.log
      pos_file /var/log/es-kube-scheduler.log.pos
      tag kube-scheduler
    </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    <source>
      @id glbc.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/glbc.log
      pos_file /var/log/es-glbc.log.pos
      tag glbc
    </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    <source>
      @id cluster-autoscaler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/cluster-autoscaler.log
      pos_file /var/log/es-cluster-autoscaler.log.pos
      tag cluster-autoscaler
    </source>

    # Logs from systemd-journal for interesting services.
    # TODO(random-liu): Remove this after cri container runtime rolls out.
    <source>
      @id journald-docker
      @type systemd
      matches [{ "_SYSTEMD_UNIT": "docker.service" }]
      <storage>
        @type local
        persistent true
        path /var/log/journald-docker.pos
      </storage>
      read_from_head true
      tag docker
    </source>
    <source>
      @id journald-container-runtime
      @type systemd
      matches [{ "_SYSTEMD_UNIT": "{{ fluentd_container_runtime_service }}.service" }]
      <storage>
        @type local
        persistent true
        path /var/log/journald-container-runtime.pos
      </storage>
      read_from_head true
      tag container-runtime
    </source>

    <source>
      @id journald-kubelet
      @type systemd
      matches [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      <storage>
        @type local
        persistent true
        path /var/log/journald-kubelet.pos
      </storage>
      read_from_head true
      tag kubelet
    </source>

    <source>
      @id journald-node-problem-detector
      @type systemd
      matches [{ "_SYSTEMD_UNIT": "node-problem-detector.service" }]
      <storage>
        @type local
        persistent true
        path /var/log/journald-node-problem-detector.pos
      </storage>
      read_from_head true
      tag node-problem-detector
    </source>

    <source>
      @id kernel
      @type systemd
      matches [{ "_TRANSPORT": "kernel" }]
      <storage>
        @type local
        persistent true
        path /var/log/kernel.pos
      </storage>
      <entry>
        fields_strip_underscores true
        fields_lowercase true
      </entry>
      read_from_head true
      tag kernel
    </source>

  forward.input.conf: |-
    # Takes the messages sent over TCP
    <source>
      @id forward
      @type forward
    </source>
  monitoring.conf: |-
    # Prometheus Exporter Plugin
    # input plugin that exports metrics
    <source>
      @id prometheus
      @type prometheus
    </source>

    <source>
      @id monitor_agent
      @type monitor_agent
    </source>

    # input plugin that collects metrics from MonitorAgent
    <source>
      @id prometheus_monitor
      @type prometheus_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for output plugin
    <source>
      @id prometheus_output_monitor
      @type prometheus_output_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for in_tail plugin
    <source>
      @id prometheus_tail_monitor
      @type prometheus_tail_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

  output.conf: |-
    <match **>
      @id elasticsearch
      @type elasticsearch
      @log_level info
      type_name _doc
      include_tag_key true
      host elasticsearch-logging
      port 9200
      logstash_format true
      <buffer>
        @type file
        path /var/log/fluentd-buffers/kubernetes.system.buffer
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever
        retry_max_interval 30
        chunk_limit_size 2M
        total_limit_size 500M
        overflow_action block
      </buffer>
    </match>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "namespaces"
  - "nodes"
  - "pods"
  verbs:
  - "get"
  - "watch"
  - "list"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: fluentd-es
  namespace: augur
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: fluentd-es
  apiGroup: ""
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-es-v3.1.0
  labels:
    k8s-app: fluentd-es
    version: v3.1.0
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    matchLabels:
      k8s-app: fluentd-es
      version: v3.1.0
  template:
    metadata:
      labels:
        k8s-app: fluentd-es
        version: v3.1.0
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: fluentd-es
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: fluentd-es
        image: ivyent/fluentd:v3.1.0
        env:
        - name: FLUENTD_ARGS
          value: --no-supervisor -q
        resources:
          limits:
            cpu: 1000m
            memory: 3Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: config-volume
          mountPath: /etc/fluent/config.d
        ports:
        - containerPort: 24231
          name: prometheus
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: prometheus
          initialDelaySeconds: 5
          timeoutSeconds: 10
        readinessProbe:
          tcpSocket:
            port: prometheus
          initialDelaySeconds: 5
          timeoutSeconds: 10
      terminationGracePeriodSeconds: 5
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: config-volume
        configMap:
          name: fluentd-es-config-v0.2.0
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: metricbeat
  labels:
    k8s-app: metricbeat
spec:
  selector:
    matchLabels:
      k8s-app: metricbeat
  template:
    metadata:
      labels:
        k8s-app: metricbeat
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      priorityClassName: system-node-critical
      serviceAccountName: fluentd-es
      imagePullSecrets:
      - name: dockerio
      containers:
      - name: metricbeat
        image: ivyent/metricbeat:7.12.1
        command:
        - bash
        - -c
        - >
          sed -i 's/localhost:9200/elasticsearch-logging:9200/g' metricbeat.yml;
          ./metricbeat setup -e;
          ./metricbeat -e
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
      terminationGracePeriodSeconds: 3
